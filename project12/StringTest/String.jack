// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array _charArray;
    field int _currentLength;
    field int _maxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      if (maxLength < 1) {
        let _maxLength = 1;
      }
      else {
        let _maxLength = maxLength;
      }

      let _charArray = Array.new(_maxLength);
      let _currentLength = 0;

      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do _charArray.dispose();

      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return _currentLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return _charArray[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      if (j < _maxLength) {
        let _charArray[j] = c;
      }
      
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      let _charArray[_currentLength] = c;
      let _currentLength = _currentLength + 1;

      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      let _charArray[(_currentLength - 1)] = null;
      let _currentLength = _currentLength - 1;
      
      return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
      var int value, counter, c, digit, arithmeticNegation;

      let arithmeticNegation = 1;
      let value = 0;
      let counter = 1;
      let c = charAt(0);

      if ((c - 48 > -1) & (c - 48 < 10)) {
        let value = c - 48;
      }
      else {
        if (c = 45) {
          let arithmeticNegation = -1;
        }
      }

      while (counter < _currentLength) {
        let c = charAt(counter);
        let value = (value * 10) + (c - 48); // multiplying by 10 shifts the value, for when the number is multiple digits
                                             // 123 is 0 * 10 + 1 = 1
                                             //        1 * 10 + 2 = 12
                                             //        12 * 10 + 3 = 123
        let counter = counter + 1;
      }

      return value * arithmeticNegation;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      let _currentLength = 0;

      do int2String(val);

      return;
    }

    method void int2String(int val) {
      var int lastDigit, c;

      let lastDigit = val - ((val / 10) * 10); // lastDigit is calculated correctly even when val is negative.
                                               // Calculation is the modulus formula.
      let c = Math.abs(lastDigit) + 48;

      if (Math.abs(val) < 10) {
        if (lastDigit < 0) {
          do appendChar(45); // Start string with "-" symbol
        }
        do appendChar(c);  
      }
      else {
        do int2String(val / 10);
        do appendChar(c);
      }

      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
