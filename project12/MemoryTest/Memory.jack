// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 * Heap resides at 2048-16383
 */ 
class Memory {

    static Array _freeList;

    /** Initializes the class. */
    function void init() {
      let _freeList = 2048;
      let _freeList[0] = 14335;
      let _freeList[1] = null;

      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      var Array memory;

      let memory = address;

      return memory[0];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      var Array memory;

      let memory = address;
      let memory[0] = value;

      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      // Implementing first-fit heuristic for finding suitable segment
      // in freeList
      var Array previousSegment;
      var Array nextSegment;
      var Array suitableSegment;
      var int housekeepingBlocks;

      let housekeepingBlocks = 2;
      let nextSegment = _freeList;
      let suitableSegment = null;

      while ((suitableSegment = null) & ~(nextSegment = null)) {
        // Cater for two housekeeping fields
        // Ensure possible segment has enough including housekeeping fields
        if ((nextSegment[0] - housekeepingBlocks) > (size + 1)) {
          let suitableSegment = nextSegment + (nextSegment[0] - size);
          let suitableSegment[0] = size + 1;

          let nextSegment[0] = nextSegment[0] - (size + 1);  
        }
        // else {
        //   if (nextSegment[0] = (size + 2)) {
        //     let suitableSegment = nextSegment;
            
        //     if (~(previousSegment = null)) {
        //       let previousSegment[1] = nextSegment[1];
        //     }
        //   }
        // }

        //TODO: Return small segment if that's all that's found

        let previousSegment = nextSegment;  
        let nextSegment = nextSegment[1];
      }

      return suitableSegment + 1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      var Array segment;
      var Array nextSegment;
      var boolean foundEnd;

      let foundEnd = false;
      let segment = o;
      let nextSegment = _freeList;

      while (~(foundEnd)) {
        if (nextSegment[1] = null) {
          let nextSegment[1] = segment;
          let foundEnd = true;
        }        

        let nextSegment = nextSegment[1];
      }

      return;
    }    
}
