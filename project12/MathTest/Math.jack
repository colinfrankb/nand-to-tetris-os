// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;
    static int bitLength;

    /** Initializes the library. */
    function void init() {
        var int counter, shiftedSum;
        
        let bitLength = 16;
        let counter = 0;
        let shiftedSum = 1;
        let twoToThe = Array.new(bitLength);

        while(counter < bitLength) {
            let twoToThe[counter] = shiftedSum;          
            let shiftedSum = shiftedSum + shiftedSum;
            let counter = counter + 1;
        }

        return;      
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = x * -1;
        }

        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, counter;

        // do Output.printInt(y);

        let sum = 0;
        let shiftedX = x;
        let counter = 0;

        //loop through the bits of y
        while(counter < bitLength) {
            if(~((y & twoToThe[counter]) = 0)) { // if the bit is set i.e 1
                let sum = sum + shiftedX; // add the multiple of the bit value
            }
            let shiftedX = shiftedX + shiftedX; // multiply by two because the next bit value will be the current
                                     // bit value multiplied by 2
                                     // i.e x * b^n-1, where b is the base
                                     // therefore, x * 2^counter
            let counter = counter + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        return x;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        return x;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        return a;
    }
}
